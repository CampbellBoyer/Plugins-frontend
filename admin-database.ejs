<!DOCTYPE html>
<html>
<head>
  <title>Admin Database</title>
  <%- include('header'); %>
</head>
<body>
  <!-- todo: boolean switch to determine whether to render admin header -->
  <%- include('top-navigation'); %>

  <!-- Admin Tabs -->
  <div id="app">
    <div class="link-tab uk-margin-left uk-padding-small uk-margin-right">
      <h4>
        <a href="/admin-database" class="tab-active uk-padding-small">Alumni</a>&nbsp;&nbsp;&nbsp;
        <a href="/admin-group" class="uk-padding-small">Groups</a>&nbsp;&nbsp;&nbsp;
        <a href="/admin-event" class="uk-padding-small">Events</a>&nbsp;&nbsp;&nbsp;
        <a href="/admin-news" class="uk-padding-small">News</a>&nbsp;&nbsp;&nbsp;
        <a href="/admin-security" class="uk-padding-small">Security</a>&nbsp;&nbsp;&nbsp;
        <a href="/admin-settings" class="uk-padding-small">Settings</a>
      </h4>
      <hr class="border-slate"></hr>
    </div>

    <div class="uk-card uk-card-default uk-margin-small-top uk-margin-right uk-margin-left">
      <div class="uk-card-header container-top uk-clearfix">
        <div class="uk-grid-small uk-flex-middle uk-float-left" uk-grid>
          <h4 class="norwester font-white"><i class="fa fa-filter"></i> &nbsp; Filters</h4>
        </div>
        <div class="uk-inline uk-float-right uk-margin-small">
          <h5 class="font-white tight"><a class="font-white" v-on:click="clearFilters">Clear Filters</a> &nbsp;|&nbsp; <a class="font-white" v-on:click="exportCsv">Export</a></h5>
        </div>
      </div>

      <div class="uk-card-body white uk-margin-remove">
        <form class="uk-form-stacked">
          <div class="uk-inline uk-margin-bottom uk-width-1-6@m">
            <label class="uk-form-label"> Name</label>
            <input class="uk-input border-charcoal2" type="text" v-model="searchName">
          </div>

          <div class="uk-inline uk-margin-bottom uk-width-small">
            <label class="uk-form-label">Grad Year</label>
            <select class="uk-select border-charcoal2" v-model="searchGradYear">
              <option value="" default> All </option>
              <option>	2019	</option>
              <option>	2018	</option>
              <option>	2017	</option>
              <option>	2016	</option>
              <option>	2015	</option>
              <option>	2014	</option>
              <option>	2013	</option>
              <option>	2012	</option>
              <option>	2011	</option>
              <option>	2010	</option>
              <option>	2009	</option>
              <option>	2008	</option>
              <option>	2007	</option>
              <option>	2006	</option>
              <option>	2005	</option>
              <option>	2004	</option>
              <option>	2003	</option>
              <option>	2002	</option>
              <option>	2001	</option>
              <option>	2000	</option>
              <option>	1999	</option>
              <option>	1998	</option>
              <option>	1997	</option>
              <option>	1996	</option>
              <option>	1995	</option>
              <option>	1994	</option>
              <option>	1993	</option>
              <option>	1992	</option>
              <option>	1991	</option>
              <option>	1990	</option>
              <option>	1989	</option>
              <option>	1988	</option>
              <option>	1987	</option>
              <option>	1986	</option>
              <option>	1985	</option>
              <option>	1984	</option>
              <option>	1983	</option>
              <option>	1982	</option>
              <option>	1981	</option>
              <option>	1980	</option>
              <option>	1979	</option>
              <option>	1978	</option>
              <option>	1977	</option>
              <option>	1976	</option>
              <option>	1975	</option>
              <option>	1974	</option>
              <option>	1973	</option>
              <option>	1972	</option>
              <option>	1971	</option>
              <option>	1970	</option>
              <option>	1969	</option>
              <option>	1968	</option>
              <option>	1967	</option>
              <option>	1966	</option>
              <option>	1965	</option>
              <option>	1964	</option>
              <option>	1963	</option>
              <option>	1962	</option>
              <option>	1961	</option>
              <option>	1960	</option>
              <option>	1959	</option>
              <option>	1958	</option>
              <option>	1957	</option>
              <option>	1956	</option>
              <option>	1955	</option>
              <option>	1954	</option>
              <option>	1953	</option>
              <option>	1952	</option>
              <option>	1951	</option>
              <option>	1950	</option>
              <option>	1949	</option>
              <option>	1948	</option>
              <option>	1947	</option>
              <option>	1946	</option>
              <option>	1945	</option>
              <option>	1944	</option>
              <option>	1943	</option>
              <option>	1942	</option>
              <option>	1941	</option>
              <option>	1940	</option>
              <option>	1939	</option>
              <option>	1938	</option>
              <option>	1937	</option>
              <option>	1936	</option>
              <option>	1935	</option>
              <option>	1934	</option>
              <option>	1933	</option>
              <option>	1932	</option>
              <option>	1931	</option>
              <option>	1930	</option>
              <option>	1929	</option>
              <option>	1928	</option>
              <option>	1927	</option>
              <option>	1926	</option>
              <option>	1925	</option>
              <option>	1924	</option>
              <option>	1923	</option>
              <option>	1922	</option>
              <option>	1921	</option>
              <option>	1920	</option>
            </select>
          </div>

          <div class="uk-inline uk-margin-bottom uk-width-1-6@m">
            <label class="uk-form-label">Email Address</label>
            <input class="uk-input border-charcoal2" type="text" v-model="searchEmailAddress">
          </div>

          <div class="uk-inline uk-margin-bottom uk-width-1-6@m">
            <label class="uk-form-label">Phone Number</label>
            <input class="uk-input border-charcoal2" type="text" v-model="searchPhoneNumber">
          </div>

          <div class="uk-inline uk-margin-bottom uk-width-1-6@m">
            <label class="uk-form-label">Membership</label>
            <select class="uk-select border-charcoal2" v-model="searchMembership">
              <option value="" default> All </option>
              <option v-for="membershipType in membershipTypes" v-bind:value="membershipType.id">{{ membershipType.name }}</option>
            </select>
          </div>

          <div class="uk-inline uk-margin-bottom uk-width-1-6@m">
            <label class="uk-form-label">Roles</label>
            <select class="uk-select border-charcoal2" v-model="searchRoles">
              <option value="" default>All</option>
              <option v-for="role in roleOptions" v-bind:value="role.id">{{ role.name }}</option>
            </select>
          </div>

          <div class="uk-inline uk-margin-bottom uk-width-medium">
            <label class="uk-form-label">Address</label>
            <input class="uk-input border-charcoal2" type="text" v-model="searchAddress">
          </div>

          <div class="uk-inline uk-margin-bottom uk-width-1-6@m">
            <label class="uk-form-label">City</label>
            <input class="uk-input border-charcoal2" type="text" v-model="searchCity">
          </div>

          <div class="uk-inline uk-margin-bottom">
            <label class="uk-form-label">State</label>
            <select class="uk-select border-charcoal2" v-model="searchState">
              <option value="" default>All</option>
              <option value="AL">AL</option>
            	<option value="AK">AK</option>
            	<option value="AZ">AZ</option>
            	<option value="AR">AR</option>
            	<option value="CA">CA</option>
            	<option value="CO">CO</option>
            	<option value="CT">CT</option>
            	<option value="DE">DE</option>
            	<option value="DC">DC</option>
            	<option value="FL">FL</option>
            	<option value="GA">GA</option>
            	<option value="HI">HI</option>
            	<option value="ID">ID</option>
            	<option value="IL">IL</option>
            	<option value="IN">IN</option>
            	<option value="IA">IA</option>
            	<option value="KS">KS</option>
            	<option value="KY">KY</option>
            	<option value="LA">LA</option>
            	<option value="ME">ME</option>
            	<option value="MD">MD</option>
            	<option value="MA">MA</option>
            	<option value="MI">MI</option>
            	<option value="MN">MN</option>
            	<option value="MS">MS</option>
            	<option value="MO">MO</option>
            	<option value="MT">MT</option>
            	<option value="NE">NE</option>
            	<option value="NV">NV</option>
            	<option value="NH">NH</option>
            	<option value="NJ">NJ</option>
            	<option value="NM">NM</option>
            	<option value="NY">NY</option>
            	<option value="NC">NC</option>
            	<option value="ND">ND</option>
            	<option value="OH">OH</option>
            	<option value="OK">OK</option>
            	<option value="OR">OR</option>
            	<option value="PA">PA</option>
            	<option value="RI">RI</option>
            	<option value="SC">SC</option>
            	<option value="SD">SD</option>
            	<option value="TN">TN</option>
            	<option value="TX">TX</option>
            	<option value="UT">UT</option>
            	<option value="VT">VT</option>
            	<option value="VA">VA</option>
            	<option value="WA">WA</option>
            	<option value="WV">WV</option>
            	<option value="WI">WI</option>
            	<option value="WY">WY</option>
            </select>
          </div>

          <div class="uk-inline uk-margin-bottom uk-width-small">
            <label class="uk-form-label">ZIP Code</label>
            <input class="uk-input border-charcoal2" type="text" v-model="searchZipCode">
          </div>

          <div class="uk-inline uk-margin-bottom">
            <label class="uk-form-label">Mortality</label>
            <select class="uk-select border-charcoal2" v-model="searchMortalityStatus">
              <option value="" default>All</option>
              <option value="alive">Alive</option>
              <option value="deceased">Deceased</option>
            </select>
          </div>

          <div class="uk-inline uk-margin-bottom">
            <label class="uk-form-label">Hall of Fame</label>
            <select class="uk-select border-charcoal2" v-model="searchHOFStatus">
              <option value="" default>All</option>
              <option value="winner">Winner</option>
              <option value="non-winner">Non-Winner</option>
            </select>
          </div>

          <div class="uk-inline uk-margin-bottom">
            <label class="uk-form-label">Groups</label>
            <select class="uk-select border-charcoal2" v-model="searchGroups">
              <option value="" default>All</option>
              <option v-for="group in groupOptions" v-bind:value="group.id">{{ group.group_name }}</option>
            </select>
          </div>

          <div class="uk-inline uk-float-right">
            <button class="uk-button button-lt" v-on:click="redoSearch" type="button">Search</button>
          </div>
        </form>
      </div>
    </div>

    <div class="uk-margin-large-top uk-margin-left uk-margin-right uk-clearfix">
      <h4 class="uk-position-relative uk-margin-right uk-float-left norwester">Results</h4>
      <div class="uk-position-relative uk-float-right uk-margin-left"><button class="uk-button button-lt" href="#modal-import" uk-toggle>Import</button></div>
      <div class="uk-position-relative uk-float-right"><button class="uk-button button-lt" href="#modal-new-alum" uk-toggle>Add to Database</button></div>
    </div>

    <div class="uk-card uk-card-default uk-margin-right uk-margin-left">
      <div class="uk-card-header container-top uk-clearfix">
        <p class="font-white float-left uk-inline"> Showing <span id="table_start">{{ (pageNumber * pageSize) - (pageSize - 1) }}</span> - <span id="table_end">{{ Math.min( userCount, pageNumber * pageSize) }}</span> of <span id="table_total">{{ userCount }}</span></p>

        <div class="uk-float-right uk-visible@m">
          <select class="uk-select border-charcoal2 uk-inline uk-width-small" v-model.number="pageSize">
            <option><%= defaultPageSize %></option>
            <option>50</option>
            <option>100</option>
          </select>
          <span class="font-white">&nbsp;per page</span>
        </div>
      </div>
      <div class="uk-overflow-auto uk-height-xxlarge">
        <table class="uk-table uk-table-large uk-margin-remove">
          <thead class="uk-card-header charcoal">
            <tr>
              <th class="uk-table-shrink uk-text-nowrap font-white border-none">Name<br>Nicknames<br>Grad Year</th>
              <th class="uk-table-shrink font-white border-none">Email<br>Membership</th>
              <th class="uk-table-shrink uk-text-nowrap font-white border-none">Home Phone<br>Cell Phone</th>
              <th class="uk-table-shrink uk-text-nowrap font-white border-none">Address<br><br></th>
              <th class="uk-table-shrink font-white border-none">Roles<br><br></th>
              <th class="uk-table-shrink font-white border-none">Groups<br><br></th>
              <th class="uk-table-shrink font-white border-none"><br><br></th>
            </tr>
          </thead>

          <div class="uk-card-body white uk-padding-remove">
            <tbody>
              <tr v-for="user in users" Key="user.id">
                <td class="table-border border-none font-small">
                  <p><a v-bind:href="'/profile/' + user.id"><span id="alum_name">{{ [user.first_name, user.middle_name, user.last_name].filter(function(e) { return !!e; }).join(' ') || '--' }}</span></a><br><span id="alt_names">{{ user.nicknames || '--' }}</span><br><span id="grad_yr" v-if="user.graduation_year">Class of {{ user.graduation_year || '--' }}</span></p>
                </td>

                <!--Be sure to add a break at 20 characters for uber long emails so they wrap -->
                <td class="table-border border-none font-small">
                  <p><span id="email">{{ user.email || '--' }}</span><br><span id="membership">{{ user.membership.membershipType.name || '--' }}</span></p>
                </td>

                <td class="table-border border-none font-small">
                  <p>H: <span id="home_phone">{{ user.home_phone || '--' }}</span><br>C: <span id="cell_phone">{{ user.cell_phone || '--' }}</span></p>
                </td>

                <td class="table-border border-none font-small">
                  <p><span id="addr_line1">{{ user.address_line_1 || '--' }}</span><br>
                    <span id="addr_line2">{{ user.address_line_2 || '--' }}</span><br>
                    <span id="city" v-if="user.city">{{ user.city || '--' }},</span> <span id="state">{{ user.state }}</span> <span id="zip">{{ user.zip_code || '--' }}</span></p>
                </td>

                <!-- todo: what permissions are these? -->
                <td class="table-border border-none">
                    <div v-for="userRole in user.roles">
                      <input class="uk-input uk-form-small font-small uk-form-width-small" type="text" v-bind:placeholder="userRole.name" disabled>
                    </div>
                    
                </td>

                <td class="table-border border-none">
                  <p><a id="no_of_grps" href="#group-modal" uk-toggle v-on:click="selectedUserGroups = user.groups">{{ user.groups.length }}</a></p>
                  <div id="group-modal" uk-modal>
                    <div class="uk-modal-dialog">
                      <button class="uk-modal-close-default" type="button" uk-close></button>
                      <div class="uk-modal-header fog">
                        <h2 class="uk-modal-title">Groups</h2>
                      </div>

                      <div class="uk-modal-body" uk-overflow-auto>
                        <p id="group" v-for="group in selectedUserGroups"><i class="fa fa-users"></i> {{ group.group_name }}</p><br>
                      </div>

                      <div class="uk-modal-footer fog uk-text-left">
                        <button class="uk-button button-lt uk-modal-close" type="button">Close</button>
                      </div>
                    </div>
                  </div>
                </td>
                <td>
                  <a href="#confirm-delete" class="uk-icon-link" uk-icon="trash" uk-toggle v-on:click="setSelectedUser(user)"></a>
                </td>
              </tr>
            </tbody>
        </table>
            <div class="uk-padding-small black">
            <ul class="uk-pagination uk-flex-center uk-margin-remove">
            <li><a v-on:click="paginateLeft"><span uk-icon="icon: chevron-left; ratio: 2" class="font-white"></span></a></li>
            <li><div>
                <select class="uk-select border-charcoal2" v-model.number="pageNumber">
                    <option v-for="page in Array(pageCount).keys()">{{ page + 1 }}</option>
                </select>
            </div></li>
            <li class="font-white uk-margin-small">of {{ pageCount }}</li>
            <li><a v-on:click="paginateRight"><span uk-icon="icon: chevron-right; ratio: 2" class="font-white"></span></a></li>
          </ul>
        </div>
      </div>
    </div>

    <!--Confirm Delete Modal-->
    <div id="confirm-delete" uk-modal>
      <div class="uk-modal-dialog">
        <button class="uk-modal-close-default" type="button" uk-close></button>
        <div class="uk-modal-header fog">
          <h2 class="uk-modal-title">Confirm Delete</h2>
        </div>

        <div class="uk-modal-body fog">
        <h5><strong>Are you sure you want to delete this record from your database?</strong></h5>
        <h6>This action cannot be undone.</h6>
        </div>

        <div class="uk-modal-footer fog uk-text-left">
          <button class="uk-button button-dk" type="button" v-on:click="deleteUser(selectedUser)">Delete</button>
          <button class="uk-button button-lt uk-modal-close" type="button">Cancel</button>
        </div>
      </div>
    </div>
    <div class="uk-margin-large"></div>
    <%- include('footer'); %>  
  </div>

  <!--Import Modal Group-->
  <div id="modal-user-batch-import">
    <div id="modal-import" uk-modal>
      <div class="uk-modal-dialog fog">
        <button class="uk-modal-close-default" type="button" uk-close></button>
        <div class="uk-modal-header fog">
          <h2 class="uk-modal-title">Import</h2>
        </div>
        <div class="uk-modal-body">
          <h5>Part 1: Select a file to import into the database.</h5>
          <div class="uk-margin" uk-margin>
            <div uk-form-custom="target: true">
              <input id="user_import_file" type="file" accept=".csv">
              <input class="uk-input uk-form-width-large uk-margin-bottom" type="text" placeholder="Click here to select a file" disabled>
            </div>
            <a class="uk-button button-dk" v-on:click="generateUserPreview">Next</a>
          </div>
        </div>
      </div>
    </div>

    <div id="modal-import2" class="uk-modal-full" uk-modal>
      <div class="uk-modal-dialog fog" uk-height-viewport>
        <button class="uk-modal-close-default" type="button" uk-close></button>
        <div class="uk-modal-header fog">
          <h2 class="uk-modal-title">Import</h2>
        </div>
        <div class="uk-modal-body">
          <h5>Part 2: Preview and confirm the import. Note that this is only a sample of the overall dataset to be imported. {{ recordCount }} records will be imported.</h5>
          <div class="uk-overflow-auto">
            <table class="uk-table uk-table-striped uk-text-nowrap">
              <thead>
                <tr>
                  <th v-for="field in previewFields">{{ field }}</th>
                </tr>
              </thead>
              <tbody>
                <tr v-for="user in previewUsers">
                  <td v-for="userField in user">{{ userField }}</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
        <div class="uk-modal-footer fog uk-text-left">
          <button class="uk-button button-dk" type="button" v-on:click="batchImportUsers">Import Data</button>
          <button class="uk-button button-lt uk-modal-close" type="button">Cancel</button>
        </div>
      </div>
    </div>
    <!--END: Import Modal Group-->

    <!-- Import Started Alert  -->
    <div class="uk-margin uk-margin-right uk-margin-left uk-hidden">
      <div class="uk-alert-primary uk-width-1-1 uk-padding" uk-alert>
        <button class="uk-alert-close" type="button" uk-close></button>
        <span><strong>Import In Progress <span uk-icon="check"></span></strong><br>
        Depending on the size of your upload, this can take up to 20 minutes. Please refrain from making any changes while processing. We will notify when it's finished.</span>
      </div>
    </div>
    <!-- End Import Started Alert -->

    <!-- Import Completed Successfully Alert  -->
    <div class="uk-margin uk-margin-right uk-margin-left uk-hidden">
      <div class="uk-alert-success uk-width-1-1" uk-alert>
        <button class="uk-alert-close" type="button" uk-close></button>
        <h5><strong>Import Completed Successfully! <span uk-icon="happy"></span></strong></h5>
      </div>
    </div>
    <!-- End Import Completed Successfully Alert-->

    <!-- Import Error Alert  -->
    <div class="uk-margin uk-margin-right uk-margin-left uk-hidden">
      <div class="uk-alert-danger uk-width-1-1 font-red" uk-alert>
        <button class="uk-alert-close" type="button" uk-close></button>
        <h5><strong> Import Error <span uk-icon="warning"></span></strong></h5>
        <span>We encountered a problem while importing your data. Please make the following corrections and try again:</br>
        <ul id="import_errors" class="font-small">
          <li class="font-red">Error Description Goes Here</li>
          <li class="font-red">Error Description Goes Here</li>
        </ul>
      </div>
    </div>
    <!-- End Import Error Alert-->
  </div>

  <!-- Add alumni to database Modal -->
  <div id="modal-new-alum" class="uk-modal-full" uk-modal>
    <div class="uk-modal-dialog fog uk-padding" uk-overflow-auto uk-height-viewport>
      <button class="uk-modal-close-full uk-close-large fog" type="button" uk-close></button>
      <h3 class="norwester font-black uk-text-left uk-padding">Add Alumnist to Database</h3>
      <div class="uk-container border-charcoal white uk-margin">

        <div class="uk-grid-match uk-child-width-1-3@m uk-flex-top uk-padding" uk-grid>
          <div>
          <!-- Far Left Section -->
            <label class="profile-label">First Name</label>
            <input id="name" class="uk-input border-charcoal2 uk-margin-bottom" type="text" v-model="first_name">
            <label class="profile-label">Middle Name</label>
            <input id="name" class="uk-input border-charcoal2 uk-margin-bottom" type="text" v-model="middle_name">
            <label class="profile-label">Last Name</label>
            <input id="name" class="uk-input border-charcoal2 uk-margin-bottom" type="text" v-model="last_name">
            <label class="profile-label">Grad Year &nbsp;<span uk-icon="info" uk-tooltip="Only an administrator can edit your graduation year. If yours is incorrect, please contact an Alumni Association official to have it corrected."></label><br>
            <input id="grad_year" class="uk-input uk-form-width-small border-charcoal2" type="text" v-model="graduation_year">
          </div>

          <!-- Far Left Section -->
          <div>
            <label class="profile-label">Nicknames</label>
            <input id="nickname" class="uk-input border-charcoal2 uk-margin-bottom" type="text" v-model="nicknames">
            <span class="profile-label">Email</span>
            <input id="email" class="uk-input border-charcoal2 uk-margin-bottom" type="text" v-model="email">
            <span class="profile-label">Home Phone</span>
            <input id="home_phone" class="uk-input border-charcoal2 uk-margin-bottom" type="text" v-model="home_phone">
            <span class="profile-label">Cell Phone</span>
            <input id="cell_phone" class="uk-input border-charcoal2 uk-margin-bottom" type="text" v-model="cell_phone">
            <span class="profile-label">Birthday</span>
            <input id="dob" class="uk-input uk-width-small border-charcoal2 uk-margin-bottom" type="text" placeholder="mm/dd/yyyy" v-model="birthday">
          </div>

          <div>
            <span class="profile-label">Marital Status</span>
            <select class="uk-select border-charcoal2 uk-margin-bottom" v-model="marital_status">
              <option value="">--</option>
              <option>Single</option>
              <option>Married</option>
              <option>Divorced</option>
              <option>Widowed</option>
            </select>

            <span class="profile-label">Address</span>
            <span>
            <input id="address_line1" class="uk-input border-charcoal2 uk-margin-bottom" type="text" v-model="address_line_1"><br>
            <input id="address_line2" class="uk-input border-charcoal2 uk-margin-bottom" type="text" v-model="address_line_2"><br>
            <input id="city" class="uk-input uk-width-1-3 border-charcoal2 uk-margin-bottom" type="text" v-model="city">, <select class="uk-select uk-width-1-4 border-charcoal2 uk-margin-bottom" v-model="state">
                <option value="AL">AL</option>
                <option value="AK">AK</option>
                <option value="AZ">AZ</option>
                <option value="AR">AR</option>
                <option value="CA">CA</option>
                <option value="CO">CO</option>
                <option value="CT">CT</option>
                <option value="DE">DE</option>
                <option value="DC">DC</option>
                <option value="FL">FL</option>
                <option value="GA">GA</option>
                <option value="HI">HI</option>
                <option value="ID">ID</option>
                <option value="IL">IL</option>
                <option value="IN">IN</option>
                <option value="IA">IA</option>
                <option value="KS">KS</option>
                <option value="KY">KY</option>
                <option value="LA">LA</option>
                <option value="ME">ME</option>
                <option value="MD">MD</option>
                <option value="MA">MA</option>
                <option value="MI">MI</option>
                <option value="MN">MN</option>
                <option value="MS">MS</option>
                <option value="MO">MO</option>
                <option value="MT">MT</option>
                <option value="NE">NE</option>
                <option value="NV">NV</option>
                <option value="NH">NH</option>
                <option value="NJ">NJ</option>
                <option value="NM">NM</option>
                <option value="NY">NY</option>
                <option value="NC">NC</option>
                <option value="ND">ND</option>
                <option value="OH">OH</option>
                <option value="OK">OK</option>
                <option value="OR">OR</option>
                <option value="PA">PA</option>
                <option value="RI">RI</option>
                <option value="SC">SC</option>
                <option value="SD">SD</option>
                <option value="TN">TN</option>
                <option value="TX">TX</option>
                <option value="UT">UT</option>
                <option value="VT">VT</option>
                <option value="VA">VA</option>
                <option value="WA">WA</option>
                <option value="WV">WV</option>
                <option value="WI">WI</option>
                <option value="WY">WY</option>
              </select>
            <input id="zip" class="uk-input uk-width-1-4 border-charcoal2 uk-margin-bottom" type="text" v-model="zip_code">
          </span>
          </div>
        </div>
        <div class="uk-position-relative uk-margin uk-margin-right uk-float-left">
          <button class="uk-button button-dk" v-on:click="createUser">Save</button>
        </div>
        <div class="uk-position-relative uk-margin uk-float-left uk-modal-close">
          <button class="uk-button button-lt">Cancel</button>
        </div>
      </div>
    </div>
  </div>

  <script type="text/javascript">
    var app = new Vue({
      el: '#app',
      data: {
        searchName: '',
        searchGradYear: '',
        searchEmailAddress: '',
        searchPhoneNumber: '',
        searchMembership: '',
        searchRoles: '',
        searchAddress: '',
        searchCity: '',
        searchState: '',
        searchZipCode: '',
        searchMortalityStatus: '',
        searchHOFStatus: '',
        searchGroups: '',
        userCount: <%= userCount %>,
        pageNumber: 1,
        pageSize: <%= defaultPageSize %>,
        groupOptions: <%- JSON.stringify(groups) %>,
        roleOptions: <%- JSON.stringify(roles) %>,
        membershipTypes: <%- JSON.stringify(membershipTypes) %>,
        users: <%- JSON.stringify(userList) %>,
        filteredUsers: <%- JSON.stringify(userList) %>,
        selectedUserGroups: [],
        selectedUser: {}
      },
      computed: {
        pageCount: function() {
          return Math.ceil(this.userCount / this.pageSize);
        }
      },
      watch: {
        // if page size changes, display new results from beginning; change if not desired behavior
        pageSize: function(newValue, oldValue) {
          if (this.pageNumber == 1) {
            this.refreshResults();
          } else {
            this.pageNumber = 1;
          }
        },
        // todo: don't update page number if error on new page load
        pageNumber: function(newValue, oldValue) {
          this.refreshResults();
        }
      },
      methods: {
        refreshResults: function() {
          var self = this;
          var queryString = '';
          queryString += ('page=' + this.pageNumber);
          queryString += ('&pageSize=' + this.pageSize);
          queryString += ('&includeRelations=' + true);
          if (this.searchName) queryString += ('&searchName=' + this.searchName);
          if (this.searchGradYear) queryString += ('&gradYear=' + this.searchGradYear);
          if (this.searchEmailAddress) queryString += ('&emailAddress=' + this.searchEmailAddress);
          if (this.searchPhoneNumber) queryString += ('&phoneNumber=' + this.searchPhoneNumber);
          if (this.searchMembership) queryString += ('&membershipType=' + this.searchMembership);
          if (this.searchRoles) queryString += ('&roleId=' + this.searchRoles);
          if (this.searchAddress) queryString += ('&address=' + this.searchAddress);
          if (this.searchCity) queryString += ('&city=' + this.searchCity);
          if (this.searchState) queryString += ('&state=' + this.searchState);
          if (this.searchZipCode) queryString += ('&zip=' + this.searchZipCode);
          if (this.searchMortalityStatus) queryString += ('&mortality=' + this.searchMortalityStatus);
          if (this.searchHOFStatus) queryString += ('&hofStatus=' + this.searchHOFStatus);
          if (this.searchGroups) queryString += ('&groupId=' + this.searchGroups);
          
          axios.get('/api/users-paginated?' + queryString)
            .then(function(data) {
              if (data.data) {
                self.users = data.data['users'];
                self.userCount = data.data['count'];
              }
            })
            .catch(function(err) {
              alert('There was an issue updating your search results. Please try again');
            });
        },
        paginateLeft: function() {
          if (this.pageNumber > 1) this.pageNumber--;
        },
        paginateRight: function() {
          if (this.pageNumber < this.pageCount) this.pageNumber++;
        },
        clearFilters: function() {
          this.searchName = '';
          this.searchGradYear = '';
          this.searchEmailAddress = '';
          this.searchPhoneNumber = '';
          this.searchMembership = '';
          this.searchRoles = '';
          this.searchAddress = '';
          this.searchCity = '';
          this.searchState = '';
          this.searchZipCode = '';
          this.searchMortalityStatus = '';
          this.searchHOFStatus = '';
          this.searchGroups = '';
        },
        redoSearch: function() {
          this.pageNumber == 1 ?
            this.refreshResults() :
            this.pageNumber = 1;
        },
        setSelectedUser: function(user) {
          this.selectedUser = user;
        },
        deleteUser: function(user) {
          var self = this;
          axios.delete('/api/user/' + user.id)
            .then(function(data) {
              UIkit.modal('#confirm-delete').hide();
              self.users = self.users.filter(function(e) { return e.id !== user.id; });
              self.userCount--;
            })
            .catch(function(err) {
              alert(err);
              alert('There was an error deleting the user. Please try again');
            });
        },
        exportCsv: function() {
          var self = this;
          var queryString = '';
          queryString += ('&includeRelations=' + true);
          if (this.searchName) queryString += ('&searchName=' + this.searchName);
          if (this.searchGradYear) queryString += ('&gradYear=' + this.searchGradYear);
          if (this.searchEmailAddress) queryString += ('&emailAddress=' + this.searchEmailAddress);
          if (this.searchPhoneNumber) queryString += ('&phoneNumber=' + this.searchPhoneNumber);
          if (this.searchMembership) queryString += ('&membershipType=' + this.searchMembership);
          if (this.searchRoles) queryString += ('&roleId=' + this.searchRoles);
          if (this.searchAddress) queryString += ('&address=' + this.searchAddress);
          if (this.searchCity) queryString += ('&city=' + this.searchCity);
          if (this.searchState) queryString += ('&state=' + this.searchState);
          if (this.searchZipCode) queryString += ('&zip=' + this.searchZipCode);
          if (this.searchMortalityStatus) queryString += ('&mortality=' + this.searchMortalityStatus);
          if (this.searchHOFStatus) queryString += ('&hofStatus=' + this.searchHOFStatus);
          if (this.searchGroups) queryString += ('&groupId=' + this.searchGroups);
          
          axios.get('/api/export-user-csv?' + queryString)
            .then(function(data) {
              if (data.data) {
                var csv = data.data;
                var blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            

                if (navigator.msSaveBlob) { // IE 10+
                  navigator.msSaveBlob(blob, exportedFilename);
                } else {
                  var link = document.createElement("a");
                  if (link.download !== undefined) { // feature detection
                    // Browsers that support HTML5 download attribute
                    var url = URL.createObjectURL(blob);
                    link.setAttribute("href", url);
                    link.setAttribute("download", 'users.csv');
                    link.style.visibility = 'hidden';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                  }
                }
              }
            })
            .catch(function(err) {
              alert('There was an issue exporting the current query as a csv file. Please try again');
            });
        }
      }
    });

    var createUserModal = new Vue({
      el: '#modal-new-alum',
      data: {
        first_name: '',
        middle_name: '',
        last_name: '',
        graduation_year: null,
        nicknames: '',
        email: '',
        home_phone: '',
        cell_phone: '',
        birthday: null,
        marital_status: '',
        address_line_1: '',
        address_line_2: '',
        city: '',
        state: '',
        zip_code: null
      },
      methods: {
        createUser: function() {
          axios.post('/api/admin-create-user', {
            user: {
              first_name: this.first_name,
              middle_name: this.middle_name,
              last_name: this.last_name,
              graduation_year: this.graduation_year,
              nicknames: this.nicknames,
              email: this.email,
              home_phone: this.home_phone,
              cell_phone: this.cell_phone,
              birthday: this.birthday,
              marital_status: this.marital_status,
              address_line_1: this.address_line_1,
              address_line_2: this.address_line_2,
              city: this.city,
              state: this.state,
              zip_code: this.zip_code
            }
          })
            .then(function(data) {
              UIkit.modal('#modal-new-alum').hide();
            })
            .catch(function(err) {
              alert('There was an error processing your request. Please try again');
            });
        }
      }
    });

    var userBatchImportModal = new Vue({
      el: '#modal-user-batch-import',
      data: {
        previewUsers: [],
        previewFields: [],
        recordCount: 0
      },
      methods: {
        generateUserPreview: function() {
          this.previewUsers = [];
          this.previewFields = [];
          
          var userImportFile = $('#user_import_file')[0].files[0];
          if (!userImportFile) {
            alert('Please select a file to import.');
            return;
          }
          if (FileReader) {
            var fileReader = new FileReader();
            var self = this;
            fileReader.onload = function(e) {

              var lines = e.target.result.split(/\r\n|\n/);
              self.previewFields = lines[0].split(',');
              self.recordCount = lines.length - 1;

              // cutoff at only 5 samples max
              for (var i = 1; i < Math.min(lines.length, 5); i++) {
                var user = {};
                var vals = lines[i].split(',');
                for (var j = 0; j < vals.length; j++) {
                  user[self.previewFields[j]] = vals[j];
                }
                self.previewUsers.push(user);
              }
            };
            fileReader.readAsText(userImportFile);
            UIkit.modal('#modal-import').hide();
            UIkit.modal('#modal-import2').show();
          } else {
            alert('Unfortunately this browser does not support generating user previews.');
          }
        },
        batchImportUsers: function() {
          var userImportFile = $('#user_import_file')[0].files[0];

          if (FileReader) {
            var users = [];
            var fileReader = new FileReader();
            
            fileReader.onload = function(e) {
              var PAGE_SIZE = 200;
              var reqs = [];
              var lines = e.target.result.split(/\r\n|\n/);
              var headers = lines[0].split(',');
              var recordCount = lines.length - 1;
              if (recordCount > 0) {
                lines = lines.slice(1);
              }

              // process input file in chunks
              for (var i = 0; i < Math.ceil(recordCount / PAGE_SIZE); i++) {
                var records = lines.slice(i*PAGE_SIZE, (i*PAGE_SIZE)+PAGE_SIZE);
                users = records.map(function(record) {
                  record = record.split(',');
                  var user = {};
                  for (var j = 0; j < headers.length; j++) {
                    user[headers[j]] = record[j];
                  }
                  return user;
                });

                reqs.push(axios.post('/api/batch-import-users', {
                  users: users
                }));
              }

              Promise.all(reqs)
                .then(function(data) {
                  alert('Users batch imported successfully.');
                  UIkit.modal('#modal-import2').hide();
                })
                .catch(function(err) {
                  alert('There was an issue importing users. Please try again');
                });
            };
            fileReader.readAsText(userImportFile);
            // var formData = new FormData();
            // formData.append('user_import_file', userImportFile);
            // axios.post('/api/batch-import-users-csv', formData)
            //   .then(function(data) {
            //     alert('Users batch imported successfully.');
            //     UIkit.modal('#modal-import2').hide();
            //   })
            //   .catch(function(err) {
            //     alert('There was an issue importing the users. Please try again');
            //   });
          } else {
            alert('Your browser needs to support FileReader to upload csv files. Please consider upgrading your browser to one in the list here: https://caniuse.com/#feat=filereader');
          }
        }
      }
    });
  </script>
</body>
</html>
