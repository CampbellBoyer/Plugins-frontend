<!DOCTYPE html>
<html>
<head>
  <title>Admin Settings</title>
  <%- include('header'); %>
</head>
<body>

  <%- include('top-navigation'); %>

  <div id="app">
  <!-- Admin Tabs -->
  <div class="link-tab uk-margin-left uk-padding-small uk-margin-right">
    <h4>
      <a href="/admin-database" class="uk-padding-small">Alumni</a>&nbsp;&nbsp;&nbsp;
      <a href="/admin-group" class="uk-padding-small">Groups</a>&nbsp;&nbsp;&nbsp;
      <a href="/admin-event" class="uk-padding-small">Events</a>&nbsp;&nbsp;&nbsp;
      <a href="/admin-news" class="uk-padding-small">News</a>&nbsp;&nbsp;&nbsp;
      <a href="/admin-security" class="tab-active uk-padding-small">Security</a>&nbsp;&nbsp;&nbsp;
      <a href="/admin-settings" class="uk-padding-small">Settings</a>
      <a href="/admin-membership" class="uk-padding-small">Memberships</a>
    </h4>
    <hr class="border-slate"></hr>
  </div>

  <!--------------------------->
  <!-- ROLES/PERMISSIONS -->
  <!--------------------------->
  <div id="roles-dashboard" class="uk-card uk-card-default uk-margin-medium-top uk-margin-right uk-margin-left">
    <div class="uk-card-header container-top">
        <div class="uk-grid-small uk-flex-middle" uk-grid>
          <h4 class="norwester font-white">Roles <h5 class="font-white" id="user_count">({{ totalRoleCount }})</h5></h4>
        </div>
    </div>
    <div class="charcoal uk-padding-small">
      <form class="uk-width-1-1">
        <div class="uk-form-controls uk-inline uk-width-1-3@m uk-margin-right">
          <span class="uk-form-icon" uk-icon="icon: search"></span>
            <input class="uk-input border-charcoal2" type="text" placeholder="Search Roles" v-model="roleNameSearch">
        </div>
        <div class="uk-inline uk-width-1-3@m uk-margin-right">
          <select class="uk-select border-charcoal2" v-model="roleSortAlphabetically">
            <option value="true">Sort Alphabetically (A-Z)</option>
            <option value="false">Sort Alphabetically (Z-A)</option>
          </select>
        </div>
        <div class="uk-inline uk-float-right">
          <h5 class="font-white"><a class="font-white" v-on:click="clearRolesFilter">Clear Filters</a> &nbsp;|&nbsp; <a class="font-white" v-on:click="redoSearch">Search</a> &nbsp;|&nbsp; <a href="#add-role" class="font-white" uk-toggle>+ Add</a></h5>
        </div>
      </form>
    </div>

    <div class="uk-card-body white uk-padding-remove uk-margin-remove uk-overflow-auto">
      <div class="uk-grid uk-padding-remove" uk-grid>
        <div class="uk-width-1-3">
          <table class="uk-table uk-table-small alumni-table uk-margin-remove">
            <tbody>
              <tr v-bind:class="{ 'selected': role.id == selectedRole.id }" v-for="role in roles" v-on:click="setSelectedRole(role)"><td>{{ role.name }}<span uk-icon="icon: chevron-right; ratio: 1.5" class="font-white uk-float-right"></span></td></tr>
            </tbody>
          </table>
          <div class="black">
            <ul class="uk-pagination uk-margin-remove uk-flex-center uk-padding-small">
              <li><a v-on:click="rolePaginateLeft"><span uk-icon="icon: chevron-left; ratio: 2" class="font-white"></span></a></li>
              <li>
                <div>
                  <select class="uk-select border-charcoal2" v-model.number="rolePageNumber">
                    <option v-for="page in Array(rolePageCount).keys()">{{ page + 1 }}</option>
                  </select>
                </div>
              </li>
              <li class="font-white uk-margin-small">of {{ rolePageCount }}</li>
              <li><a v-on:click="rolePaginateRight"><span uk-icon="icon: chevron-right; ratio: 2" class="font-white"></span></a></li>
            </ul>
          </div>
        </div>

        <div class="uk-padding uk-width-1-3">
          <h4 class="tight norwester">Permissions</h4><a v-on:click="updateRolePermissions">Save</a>

          <h6>Permissions dictate what a user can view and do in the system:</h6>
          <div v-for="permission in permissions"><label><input class="uk-checkbox" type="checkbox" :checked="permissionContainedInRole(permission)" value="permission" v-on:click="toggleRolePermission($event, permission)" /> &nbsp; {{ permission.friendly_name }}</label><br /></div>
        </div>
      </div>
    </div>
  </div>

  <!-- Add Role Modal -->
  <div id="add-role" uk-modal>
    <div class="uk-modal-dialog">
      <button class="uk-modal-close-default" type="button" uk-close></button>
      <div class="uk-modal-header fog">
        <h3 class="uk-modal-title norwester">Create a Role</h3>
      </div>

      <div class="uk-modal-body fog uk-padding">
        <label class="uk-form-label" for="form-stacked-text">Give the Role a Name:</label><br>
        <input class="uk-input border-charcoal2 uk-width-1-1" type="text" v-model="newRoleName">
      </div>

      <div class="uk-modal-footer fog uk-text-left">
        <button class="uk-button button-lt" type="button" v-on:click="createNewRole">Add</button>
      </div>
    </div>
  </div>

  <div class="uk-margin-large"></div>

  <!--------------------------->
  <!-- User Setup Section -->
  <!--------------------------->
  <div id="users-dashboard" class="uk-card uk-card-default uk-margin-medium-top uk-margin-right uk-margin-left">
    <div class="uk-card-header container-top">
      <div class="uk-grid-small uk-flex-middle" uk-grid>
        <h4 class="norwester font-white">Users <h5 class="font-white" id="user_count">({{ totalUserCount }})</h5></h4>
      </div>
    </div>
    <div class="charcoal uk-padding-small">
      <form class="uk-width-1-1">
        <div class="uk-form-controls uk-inline uk-width-1-3@m uk-margin-right">
          <span class="uk-form-icon" uk-icon="icon: search"></span>
          <input class="uk-input border-charcoal2" type="text" placeholder="Search by user name" v-model="userNameSearch">
        </div>
        <div class="uk-inline uk-width-1-3@m uk-margin-right">
          <select class="uk-select border-charcoal2" v-model="userSortAlphabetically">
            <option value="true">Sort Alphabetically (A-Z)</option>
            <option value="false">Sort Alphabetically (Z-A)</option>
          </select>
        </div>
        <div class="uk-inline uk-float-right">
          <h5 class="font-white"><a class="font-white" v-on:click="clearUsersFilter">Clear Filters</a> &nbsp;|&nbsp; <a class="font-white" v-on:click="redoSearch">Search</a> &nbsp;|&nbsp; <a class="font-white" v-on:click="exportCsv">Export</a></h5>
        </div>
      </form>
    </div>

    <div class="uk-card-body white uk-padding-remove uk-margin-remove uk-overflow-auto">
      <div class="uk-grid uk-padding-remove uk-child-width-1-3" uk-grid>
        <div>
          <table class="uk-table uk-table-small alumni-table uk-margin-remove">
            <tbody>
              <tr v-bind:class="{ 'selected': user.id == selectedUser.id }" v-for="user in users" v-on:click="setSelectedUser(user)"><td>{{ [user.first_name, user.middle_name, user.last_name].filter(function(e) { return !!e; }).join(' ') }}<span uk-icon="icon: chevron-right; ratio: 1.5" class="font-white uk-float-right" :key="user.id"></td></tr>
            </tbody>
          </table>
          <div class="uk-padding-small black">
            <ul class="uk-pagination uk-flex-center uk-margin-remove">
              <li><a v-on:click="userPaginateLeft"><span uk-icon="icon: chevron-left; ratio: 2" class="font-white"></span></a></li>
              <li>
                <div>
                  <select class="uk-select border-charcoal2" v-model.number="userPageNumber">
                    <option v-for="page in Array(userPageCount).keys()">{{ page + 1}}</option>
                  </select>
                </div>
              </li>
              <li class="font-white uk-margin-small">of {{ userPageCount }}</li>
              <li><a v-on:click="userPaginateRight"><span uk-icon="icon: chevron-right; ratio: 2" class="font-white"></span></a></li>
            </ul>
          </div>
        </div>

        <div class="uk-padding">
          <h3 class="tight norwester">{{ [selectedUser.first_name, selectedUser.middle_name, selectedUser.last_name].filter(function(e) { return !!e; }).join(' ') }}</h3>
          <h6 class="tight">Member since <span id="member_date">{{ moment(selectedUser.createdAt).format('MM-DD-YYYY') }}</span></h6>
          <hr></hr>
          <h4 class="norwester">Roles <a href="#add_user_role" uk-toggle>(+ Add)</a></h4>
          <div v-bind:id="userRole.id" uk-alert class="border-slate uk-border-rounded" v-for="userRole in selectedUser.roles">
            <button class="uk-close-large" type="button" uk-close v-on:click="deleteUserRole(userRole)"></button>
            <p>{{ userRole.name }}</p>
          </div>
        </div>

        <div class="uk-padding uk-padding-remove-bottom">
          <h4 class="norwester">History</h4>
          <div class="uk-divider-vertical uk-padding-small uk-padding-remove-top uk-float-left uk-width-1-1" v-for="event in selectedUser.activityHistoryItems">
            <h6 class="wide font-black">
              <span id="change_descr"><strong>{{ event.activityDescription }}</strong></span><br>
              <span id="chg_date">{{ moment(event.createdAt).format('MM-DD-YYYY') }}</span>, <span id="chg_time">{{ moment(event.createdAt).format('hh:mm A') }}</span>
            </h6>
          </div>
        </div>

        <a class="uk-button button-lt font-small float-right" href="#history-modal" uk-toggle>View All</a>

        <!-- Here is the code for the modal with additional history -->
        <div id="history-modal" uk-modal>
          <div class="uk-modal-dialog">
            <button class="uk-modal-close-default" type="button" uk-close></button>
            <div class="uk-modal-header fog">
              <h2 class="uk-modal-title">User History</h2>
            </div>

            <div class="uk-modal-body" uk-overflow-auto>
              <div class="uk-divider-vertical uk-padding-small uk-padding-remove-top uk-float-left uk-width-1-1" v-for="event in selectedUser.activityHistoryItems">
                <h5>
                  <span id="change_descr"><strong>{{ event.activityDescription }}</strong></span><br>
                  <span id="chg_date">{{ moment(event.createdAt).format('MM-DD-YYYY') }}</span>, <span id="chg_time">{{ moment(event.createdAt).format('hh:mm A') }}</span>
                </h5>
              </div>

              <div class="uk-modal-footer fog uk-text-left">
                <button class="uk-button button-lt uk-modal-close" type="button">Close</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!--Add Role Modal-->
    <!-- todo: add selected roles to selected user, add api to push updates to backend -->
    <div id="add_user_role" uk-modal>
      <div class="uk-modal-dialog">
        <button class="uk-modal-close-default" type="button" uk-close></button>
        <div class="uk-modal-header fog">
          <h2 class="uk-modal-title">Add Roles</h2>
        </div>

        <div class="uk-modal-body" uk-overflow-auto>
          <h6>Select one or more roles from the list below to add them to the user.</h6>

          <div class="uk-card-body white border-charcoal uk-padding-remove uk-margin-remove">
            <div class="charcoal border-charcoal2 uk-padding-small uk-width-1-1">
              <div class="uk-form-controls uk-inline uk-margin-right uk-margin-bottom-small">
                <span class="uk-form-icon" uk-icon="icon: search"></span>
                <input class="uk-input border-charcoal2" type="text" placeholder="Search Roles" v-model="userRoleSearchQuery">
              </div>
            </div>
            <table class="uk-table uk-table-small uk-margin-remove">
              <tbody>
                <tr v-for="role in displayUserRoles">
                  <td><input class="uk-checkbox uk-margin-right" type="checkbox" :checked="selectedUserRoles.some(function(e) { return e.id === role.id; })" v-on:click="addUserRole(event, role)">{{ role.name }}</td>
                </tr>
              </tbody>
            </table>
            <div class="uk-padding-small black">
              <ul class="uk-pagination uk-flex-center uk-margin-remove">
                <li><a v-on:click="userRolesPaginateLeft"><span uk-icon="icon: chevron-left; ratio: 2" class="font-white"></span></a></li>
                <li>
                  <div>
                    <select class="uk-select border-charcoal2" v-model.number="userRolesPageNumber">
                      <option v-for="page in Array(userRolesPageCount).keys()">{{ page + 1 }}</option>
                    </select>
                  </div>
                </li>
                <li class="font-white uk-margin-small">of {{ userRolesPageCount }}</li>
                <li><a v-on:click="userRolesPaginateRight"><span uk-icon="icon: chevron-right; ratio: 2" class="font-white"></span></a></li>
              </ul>
            </div>
          </div>
        </div>
        <div class="uk-modal-footer fog uk-text-left">
          <button class="uk-button button-dk" type="button" v-on:click="saveUserRoles">Save</button>
          <button class="uk-button button-lt uk-modal-close" type="button">Cancel</button>
        </div>
      </div>
    </div>
  </div>

  <div class="uk-margin-large"></div>
  <%- include('footer'); %>
</div>

  <!-- End Add Role Modal -->
  <script type="text/javascript">
    var rolesDashboard = new Vue({
      el: '#roles-dashboard',
      data: {
        rolePageNumber: 1,
        rolePageSize: <%= defaultPageSize %>,
        totalRoleCount: <%= roleCount %>,
        roles: <%- JSON.stringify(roles) %>,
        roleNameSearch: '',
        roleSortAlphabetically: true,
        selectedRole: <%- JSON.stringify(roles[0]) || JSON.stringify({}) %>,
        permissions: <%- JSON.stringify(permissions) %>,
        newRoleName: ''
      },
      computed: {
        rolePageCount: function() {
          return Math.ceil(this.totalRoleCount / this.rolePageSize);
        },
      },
      watch: {
        rolePageSize: function(newValue, oldValue) {
          this.pageNumber === 1 ? 
            this.refreshResults() :
            this.rolePageNumber = 1;
        },
        rolePageNumber: function(newValue, oldValue) {
          this.refreshResults();
        }
      },
      methods: {
        refreshResults: function() {
          var queryString = '';
          var self = this;
          queryString += ('page=' + this.rolePageNumber);
          queryString += ('&pageSize=' + this.rolePageSize);
          queryString += ('&sortAlphabetical=' + this.roleSortAlphabetically);
          if (this.roleNameSearch) queryString += ('&roleName=' + this.roleNameSearch);

          axios.get('/api/roles-paginated?' + queryString)
            .then(function(data) {
              if (data.data) {
                self.roles = data.data['roles'];
                self.totalRoleCount = data.data['count'];
                if (self.selectedRole && self.roles.length > 0)
                  self.selectedRole = self.roles[0];
              }
            })
            .catch(function(err) {
              alert('There was an issue updating your search results. Please try again');
            });
        },
        redoSearch: function() {
          this.rolePageNumber === 1 ?
            this.refreshResults() :
            this.rolePageNumber = 1;
        },
        rolePaginateLeft: function() {
          if (this.rolePageNumber > 1) this.rolePageNumber--;
        },
        rolePaginateRight: function() {
          if (this.rolePageNumber < this.rolePageCount) this.rolePageNumber++;
        },
        setSelectedRole: function(role) {
          this.selectedRole = role;
        },
        clearRolesFilter: function() {
          this.roleNameSearch = '';
          this.roleSortAlphabetically = true;
        },
        createNewRole: function() {
          var errMsg = ''; 
          if (!this.newRoleName) errMsg += 'Role name cannot be empty.';
          if (errMsg) alert(errMsg);
          else {
            axios.post('/api/role', {
              name: this.newRoleName
            })
              .then(function(data) {
                UIkit.modal('#add-role').hide();
              })
              .catch(function(err) {
                var msg;
                if (err && err.response && err.response.data && err.response.data.message) msg = err.response.data.message;
                alert(msg || 'There was an error processing your request. Please try again');
              });
          }
        },
        permissionContainedInRole: function(permission) {
          return this.selectedRole.permissions ? this.selectedRole.permissions.some(function(e) {
            return e.id == permission.id;
          }) : false;
        },
        toggleRolePermission: function(event, permission) {
          event.target.checked ?
            this.selectedRole.permissions.push(permission) :
            this.selectedRole.permissions = this.selectedRole.permissions.filter(function(e) { return e.id !== permission.id; });
        },
        updateRolePermissions: function() {
          axios.put('/api/update-role', {
            role: this.selectedRole
          })
            .then(function(data) {
              alert('Updated role successfully.');
            })
            .catch(function(err) {
              alert('There was an issue processing your request. Please try again');
            });
        }
      }
    });

    // todo: refresh selectedUserRoles after update
    var usersDashboard = new Vue({
      el: '#users-dashboard',
      data: {
        userPageNumber: 1,
        userPageSize: <%= defaultPageSize %>,
        totalUserCount: <%= userCount %>,
        users: <%- JSON.stringify(userList) %>,
        selectedUser: <%- JSON.stringify(userList[0]) || JSON.stringify({}) %>,
        userNameSearch: '',
        userSortAlphabetically: true,
        userRolesPageNumber: 1,
        userRolesPageSize: <%= defaultPageSize %>,
        filteredUsers: <%- JSON.stringify(userList) %>,
        filteredUserRoles: <%- JSON.stringify(roles) %>,
        selectedUserRoles: <%- JSON.stringify(userList[0].roles) || JSON.stringify([]) %>,
        userRoleSearchQuery: ''
      },
      computed: {
        userPageCount: function() {
          return Math.ceil(this.totalUserCount / this.userPageSize);
        },
        displayUserRoles: function() {
          var self = this;
          var startEl = (this.userRolesPageNumber - 1) * this.userRolesPageSize;
          return this.filteredUserRoles
            .filter(function(e) {
              return e.name.toLowerCase().indexOf(self.userRoleSearchQuery.toLowerCase()) !== -1;
            })
            .slice(startEl, startEl + this.userRolesPageSize);
        },
        userRolesPageCount: function() {
          return Math.ceil(this.filteredUserRoles.length / this.userRolesPageSize);
        }
      },
      watch: {
        // if page size changes, display new results from beginning; change if not desired behavior
        userPageSize: function(newValue, oldValue) {
          this.userPageNumber = 1;
        },
        userPageNumber: function(newValue, oldValue) {
          this.refreshResults();
        },
        selectedUser: function(newValue, oldValue) {
          this.selectedUserRoles = newValue.roles;
        }
      },
      methods: {
        refreshResults: function() {
          var queryString = '';
          var self = this;
          queryString += ('page=' + this.userPageNumber);
          queryString += ('&pageSize=' + this.userPageSize);
          queryString += ('&sortAlphabetical=' + this.userSortAlphabetically);
          queryString += ('&includeRelations=' + 'true');
          if (this.userNameSearch) queryString += ('&searchName=' + this.userNameSearch);

          axios.get('/api/users-paginated?' + queryString)
            .then(function(data) {
              if (data.data) {
                self.users = data.data['users'];
                self.totalUserCount = data.data['count'];
                if (self.selectedUser && self.users.length > 0)
                  self.selectedUser = self.users[0];
              }
            })
            .catch(function(err) {
              alert('There was an issue updating your search results. Please try again');
            });
        },
        redoSearch: function() {
          this.userPageNumber === 1 ?
            this.refreshResults() :
            this.userPageNumber = 1;
        },
        userPaginateLeft: function() {
          if (this.userPageNumber > 1) this.userPageNumber--;
        },
        userPaginateRight: function() {
          if (this.userPageNumber < this.userPageCount) this.userPageNumber++;
        },
        setSelectedUser: function(user) {
          this.selectedUser = user;
          Object.assign(this.selectedUserRoles, this.selectedUser.roles || []);
        },
        clearUsersFilter: function() {
          this.userNameSearch = '';
          this.userSortAlphabetically = true;
        },
        userRolesPaginateLeft: function() {
          if (this.userRolesPageNumber > 1) this.userRolesPageNumber--;
        },
        userRolesPaginateRight: function() {
          if (this.userRolesPageNumber < this.userRolesPageCount) this.userRolesPageNumber++;
        },
        exportCsv: function() {
          var queryString = '';
          var self = this;
          queryString += ('&sortAlphabetical=' + this.userSortAlphabetically);
          queryString += ('&includeRelations=' + 'true');
          if (this.userNameSearch) queryString += ('&searchName=' + this.userNameSearch);

          axios.get('/api/export-user-csv?' + queryString)
            .then(function(data) {
              if (data.data) {
                var csv = data.data;
                var blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            

                if (navigator.msSaveBlob) { // IE 10+
                  navigator.msSaveBlob(blob, exportedFilename);
                } else {
                  var link = document.createElement("a");
                  if (link.download !== undefined) { // feature detection
                    // Browsers that support HTML5 download attribute
                    var url = URL.createObjectURL(blob);
                    link.setAttribute("href", url);
                    link.setAttribute("download", 'users.csv');
                    link.style.visibility = 'hidden';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                  }
                }
              }
            })
            .catch(function(err) {
              alert('There was an issue exporting the current query as a csv file. Please try again');
            });
        },
        addUserRole: function(event, role) {
          event.target.checked ?
            this.selectedUserRoles.push(role) :
            this.selectedUserRoles = this.selectedUserRoles.filter(function(e) {
              return e.id !== role.id;
            });
        },
        deleteUserRole: function(role) {
          var self = this;
          axios.post('/api/delete-user-role', {
            role_id: role.id,
            user_id: this.selectedUser.id
          })
            .then(function(data) {
              var selectedUsername = [self.selectedUser.first_name, self.selectedUser.middle_name, self.selectedUser.last_name].filter(function(e) { return !!e; }).join(' ');
              alert(role.name + ' removed from ' + selectedUsername);
              self.selectedUser.roles = self.selectedUser.roles.filter(function(e) {
                return e.id !== role.id;
              });
              Object.assign(self.selectedUserRoles, self.selectedUser.roles);
            })
            .catch(function(err) {
              alert('There was an issue processing your request. Please try again');
            });
        },
        saveUserRoles: function() {
          var self = this;
          axios.put('/api/user-roles', {
            user: this.selectedUser,
            roles: this.selectedUserRoles
          })
            .then(function(data) {
              alert('User roles updated successfully.');
              UIkit.modal('#add_user_role').hide();
              Object.assign(self.selectedUser.roles, self.selectedUserRoles);
            })
            .catch(function(err) {
              alert('There was an issue processing your request. Please try again');
            });
        }
      }
    });
  </script>
</body>
</html>
