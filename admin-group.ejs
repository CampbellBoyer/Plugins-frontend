<!DOCTYPE html>
<html>
<head>
  <title>Admin Groups</title>
  <%- include('header') %>
</head>
<body>
  <%- include('top-navigation'); %>

  <!-- Admin Tabs -->
  <div class="link-tab uk-margin-left uk-padding-small uk-margin-right">
    <h4>
      <a href="/admin-database" class="uk-padding-small">Alumni</a>&nbsp;&nbsp;&nbsp;
      <a href="/admin-group" class="tab-active uk-padding-small">Groups</a>&nbsp;&nbsp;&nbsp;
      <a href="/admin-event" class="uk-padding-small">Events</a>&nbsp;&nbsp;&nbsp;
      <a href="/admin-news" class="uk-padding-small">News</a>&nbsp;&nbsp;&nbsp;
      <a href="/admin-security" class="uk-padding-small">Security</a>&nbsp;&nbsp;&nbsp;
      <a href="/admin-settings" class="uk-padding-small">Settings</a>
      <a href="/admin-membership" class="uk-padding-small">Memberships</a>
    </h4>
    <hr class="border-slate"></hr>
  </div>

  <div id="app">
  <!--------------------------->
  <!-- Groups Table -->
  <!--------------------------->
  <div class="uk-margin-small-top uk-margin-left uk-margin-right uk-clearfix">
    <h4 class="uk-position-relative uk-margin-right uk-float-left norwester">Group Database</h4>
    <div class="uk-position-relative uk-float-right"><button class="uk-button button-lt" href="#add_group" uk-toggle>Add a Group</button></div>
  </div>

  <div class="uk-card uk-card-default uk-margin-top uk-margin-right uk-margin-left">
    <div class="uk-card-header container-top uk-clearfix">
      <p class="font-white float-left uk-inline"> Showing <span id="table_start">{{ (pageNumber * pageSize) - (pageSize - 1) }}</span> - <span id="table_end">{{ Math.min( totalGroupCount, pageNumber * pageSize) }}</span> of <span id="table_total">{{ totalGroupCount }}</span></p>
      <div class="uk-float-right uk-visible@m">
        <select class="uk-select border-charcoal2 uk-inline uk-width-small" v-model.number="pageSize">
          <option><%= defaultPageSize %></option>
          <option>50</option>
          <option>100</option>
        </select>
        <span class="font-white">&nbsp;per page</span>
      </div>
    </div>
    <div class="charcoal uk-padding-small">
      <form class="uk-width-1-1 uk-padding-small">
        <div class="uk-form-controls uk-inline uk-width-1-3@m uk-margin-right uk-margin-bottom-small">
          <span class="uk-form-icon" uk-icon="icon: search"></span>
            <input class="uk-input border-charcoal2" type="text" placeholder="Search by Group Name" v-model="searchGroupName">
        </div>
        <div class="uk-inline uk-width-1-3@m uk-margin-right uk-margin-bottom-small">
          <select class="uk-select border-charcoal2" v-model="sortAlphabetical">
            <option value="true">Sort Alphabetically (A-Z)</option>
            <option value="false">Sort Alphabetically (Z-A)</option>
          </select>
        </div>
        <div class="uk-inline uk-float-right uk-margin-bottom-small">
          <h5 class="font-white"><a class="font-white" v-on:click="clearFilters">Clear Filters</a> | <a class="font-white" v-on:click="redoSearch">Search</a></h5>
        </div>
      </form>
    </div>

    <div class="uk-card-body white uk-padding-remove uk-margin-remove uk-width-1-1">
      <table class="uk-table uk-table-large uk-margin-remove uk-width-1-1 uk-overflow-auto">
        <thead class="uk-card-header white">
          <tr>
            <th class="uk-table-shrink border-none uk-width-1-2 ">Group Name</th>
            <th class="uk-table-shrink border-none"># of Members</th>
            <th class="uk-table-shrink border-none">Leader</th>
            <th class="uk-table-shrink border-none"></th>
          </tr>
        </thead>
        <div class="uk-card-body white uk-padding-remove">
          <tbody>
            <tr v-for="group in groups">
              <td class="table-border border-none">
                <a v-bind:href="'/group-details/' + group.id"><span id="group_name">{{ group.group_name }}</span></a>
              </td>
              <td class="table-border border-none">
                <span id="member-count">{{ group.users.length }}</span>
              </td>
              <td class="table-border border-none"><p v-if="group.groupOwner">{{ [group.groupOwner.first_name, group.groupOwner.middle_name, group.groupOwner.last_name].filter(function(e) { return !!e; }).join(' ') }}</p><a href="#edit-leader" class="uk-icon-link" uk-icon="pencil" uk-toggle v-on:click="setSelectedGroup(group)"></a></td>
              <td class="table-border border-none"><a href="#confirm-delete" class="uk-icon-link" uk-icon="trash" uk-toggle v-on:click="setSelectedGroup(group)"></a></td>
            </tr>
          </tbody>
        </div>
      </table>
      <div class="uk-padding-small black">
        <ul class="uk-pagination uk-flex-center uk-margin-remove">
          <li><a v-on:click="paginateLeft"><span uk-icon="icon: chevron-left; ratio: 2" class="font-white"></span></a></li>
          <li>
            <div>
              <select class="uk-select border-charcoal2" v-model.number="pageNumber">
                <option v-for="page in Array(pageCount).keys()">{{ page + 1 }}</option>
              </select>
            </div>
          </li>
          <li class="font-white uk-margin-small">of {{ pageCount }}</li>
          <li><a v-on:click="paginateRight"><span uk-icon="icon: chevron-right; ratio: 2" class="font-white"></span></a></li>
        </ul>
      </div>
    </div>
  </div>
    <!--Edit Group Leacer Modal-->
  <div id="edit-leader" uk-modal v-if="selectedGroup">
    <div class="uk-modal-dialog">
      <button class="uk-modal-close-default" type="button" uk-close></button>
      <div class="uk-modal-header fog">
        <h2 class="uk-modal-title">Edit Group Leader</h2>
      </div>

      <div class="uk-modal-body" uk-overflow-auto>
        <label class="uk-form-label" for="form-stacked-text">Current Leader:</label>
          <div class="uk-form-controls" v-if="selectedGroup && selectedGroup.groupOwner">
            <p>{{ [selectedGroup.groupOwner.first_name, selectedGroup.groupOwner.middle_name, selectedGroup.groupOwner.last_name].filter(function(e){ return !!e; }).join(' ') }}</p>
          </div>
        <hr>
        <h6>Select a user from the list below to replace the leader of this group.</h6>

        <div class="uk-card-body white border-charcoal uk-padding-remove uk-margin-remove">
          <div class="charcoal border-charcoal2 uk-padding-small uk-width-1-1">
            <div class="uk-form-controls uk-inline uk-margin-right uk-margin-bottom-small">
              <span class="uk-form-icon" uk-icon="icon: search"></span>
              <input class="uk-input border-charcoal2" type="text" placeholder="Search by User's Name" v-model="selectedGroupMembersNameSearch">
            </div>
          </div>
          <table class="uk-table uk-table-small alumni-table uk-margin-remove">
            <tbody>
              <tr v-bind:class="{ 'selected': member.id == newSelectedGroupLeader.id }" v-for="member in displaySelectedGroupUsers" v-on:click="setNewSelectedGroupLeader(member)"><td>{{ [member.first_name, member.middle_name, member.last_name].filter(function(e) { return !!e; }).join(' ') }}<span uk-icon="icon: plus; ratio: 1.5" class="font-white uk-float-right"></span></td></tr>
            </tbody>
          </table>
        </div>
      </div>

      <div class="uk-modal-footer fog uk-text-left">
        <button class="uk-button button-dk" type="button" v-on:click="updateSelectedGroupLeader">Save</button>
        <button class="uk-button button-lt uk-modal-close" type="button">Cancel</button>
      </div>
    </div>
  </div>
  <!-- END Edit Group Leacer Modal -->

  <!-- Add a Group Modal -->
  <div id="add_group" uk-modal>
    <div class="uk-modal-dialog">
      <button class="uk-modal-close-default" type="button" uk-close></button>
      <div class="uk-modal-header fog">
        <h3 class="uk-modal-title norwester">Create a Group</h3>
      </div>

      <div class="uk-modal-body fog uk-padding">
        <label class="uk-form-label" for="form-stacked-text">Group Name</label><br>
        <input class="uk-input border-charcoal2 uk-width-1-1" type="text" v-model="newGroupName"><br><br>
        <label class="uk-form-label" for="form-stacked-text">Group Description</label><br>
        <textarea class="border-charcoal2 uk-width-1-1" rows="6" type="textarea" v-model="newGroupDescription"></textarea>
      </div>

      <div class="uk-modal-footer fog uk-text-left">
        <button class="uk-button button-lt" type="button" v-on:click="createGroup">Add</button>
      </div>
    </div>
  </div>

  <!--Confirm Delete Modal-->
  <div id="confirm-delete" uk-modal>
    <div class="uk-modal-dialog">
      <button class="uk-modal-close-default" type="button" uk-close></button>
      <div class="uk-modal-header fog">
        <h2 class="uk-modal-title">Confirm Delete</h2>
      </div>

      <div class="uk-modal-body fog">
        <h5><strong>Are you sure you want to delete this group from your database?</strong></h5>
        <h6>This action cannot be undone.</h6>
      </div>

      <div class="uk-modal-footer fog uk-text-left">
        <button class="uk-button button-dk" type="button" v-on:click="deleteGroup(selectedGroup)">Delete</button>
        <button class="uk-button button-lt uk-modal-close" type="button">Cancel</button>
      </div>
    </div>
  </div>
  <!-- End Confirm Delete Modal -->
  </div>

  <!-- Activities table -->
  <div id="activities">
    <div class="uk-margin-xlarge-top uk-margin-left uk-margin-right uk-clearfix">
      <h4 class="uk-position-relative uk-margin-right uk-float-left norwester">Activity Database</h4>
      <div class="uk-position-relative uk-float-right"><button class="uk-button button-lt" href="#add-activity" uk-toggle>Add an Activity</button></div>
    </div>
    <div class="uk-card uk-card-default uk-margin-top uk-margin-right uk-margin-left">
      <div class="uk-card-header container-top uk-clearfix">
        <p class="font-white float-left uk-inline"> Showing <span id="table_start">{{ (pageNumber * pageSize) - (pageSize - 1) }}</span> - <span id="table_end">{{ Math.min( totalActivityCount, pageNumber * pageSize) }}</span> of <span id="table_total">{{ totalActivityCount }}</span></p>
        <div class="uk-float-right uk-visible@m">
          <select class="uk-select border-charcoal2 uk-inline uk-width-small" v-model.number="pageSize">
            <option><%= defaultPageSize %></option>
            <option>50</option>
            <option>100</option>
          </select>
          <span class="font-white">&nbsp;per page</span>
        </div>
      </div>
      <div class="charcoal uk-padding-small">
        <form class="uk-width-1-1 uk-padding-small">
          <div class="uk-form-controls uk-inline uk-width-1-3@m uk-margin-right uk-margin-bottom-small">
            <span class="uk-form-icon" uk-icon="icon: search"></span>
              <input class="uk-input border-charcoal2" type="text" placeholder="Search by Name" v-model="searchActivities">
          </div>
          <div class="uk-inline uk-width-1-3@m uk-margin-right uk-margin-bottom-small">
            <select class="uk-select border-charcoal2" v-model="sortAlphabetical">
              <option value="true">Sort Alphabetically (A-Z)</option>
              <option value="false">Sort Alphabetically (Z-A)</option>
            </select>
          </div>
          <div class="uk-inline uk-float-right uk-margin-bottom-small">
            <h5 class="font-white"><a class="font-white" v-on:click="clearFilters">Clear Filters</a> | <a class="font-white" v-on:click="redoSearch">Search</a></h5>
          </div>
        </form>
      </div>

      <div class="uk-card-body white uk-padding-remove uk-margin-remove uk-width-1-1">
        <table class="uk-table uk-table-large uk-margin-remove uk-width-1-1 uk-overflow-auto">
          <div class="uk-card-body white uk-padding-remove">
            <tbody>
              <tr v-for="activity in activities">
                <td class="table-border border-none">{{ activity.name }}</td>
                <td class="table-border border-none"><a href="#confirm-delete-activity" class="uk-icon-link" uk-icon="trash" uk-toggle v-on:click="setSelectedActivity(activity)"></a></td>
              </tr>
            </tbody>
          </div>
        </table>
        <div class="uk-padding-small black">
          <ul class="uk-pagination uk-flex-center uk-margin-remove">
            <li><a v-on:click="paginateLeft"><span uk-icon="icon: chevron-left; ratio: 2" class="font-white"></span></a></li>
            <li>
              <div>
                <select class="uk-select border-charcoal2" v-model.number="pageNumber">
                  <option v-for="page in Array(pageCount).keys()">{{ page + 1 }}</option>
                </select>
              </div>
            </li>
            <li class="font-white uk-margin-small">of {{ pageCount }}</li>
            <li><a v-on:click="paginateRight"><span uk-icon="icon: chevron-right; ratio: 2" class="font-white"></span></a></li>
          </ul>
        </div>
      </div>
    </div>

    <!-- Add Activity modal -->
    <div id="add-activity" uk-modal>
    <div class="uk-modal-dialog">
      <button class="uk-modal-close-default" type="button" uk-close></button>
      <div class="uk-modal-header fog">
        <h3 class="uk-modal-title norwester">Add an Activity</h3>
      </div>

      <div class="uk-modal-body fog uk-padding">
        <label class="uk-form-label" for="form-stacked-text">Name</label><br>
        <input class="uk-input border-charcoal2 uk-width-1-1" type="text" v-model="newActivityName"><br><br>
      </div>

      <div class="uk-modal-footer fog uk-text-left">
        <button class="uk-button button-lt" type="button" v-on:click="createActivity">Add</button>
      </div>
    </div>
  </div>

  <!-- Delete Activity Modal-->
  <div id="confirm-delete-activity" uk-modal>
    <div class="uk-modal-dialog">
      <button class="uk-modal-close-default" type="button" uk-close></button>
      <div class="uk-modal-header fog">
        <h2 class="uk-modal-title">Confirm Delete</h2>
      </div>

      <div class="uk-modal-body fog">
        <h5><strong>Are you sure you want to delete this activity?</strong></h5>
        <h6>This action cannot be undone.</h6>
      </div>

      <div class="uk-modal-footer fog uk-text-left">
        <button class="uk-button button-dk" type="button" v-on:click="deleteActivity">Delete</button>
        <button class="uk-button button-lt uk-modal-close" type="button">Cancel</button>
      </div>
    </div>
  </div>

  </div>

  <div class="uk-margin-large"></div>
  
  <%- include('footer'); %>
  <script type="text/javascript">
    var activitiesApp = new Vue({
      el: '#activities',
      data: {
        pageNumber: 1,
        pageSize: <%= defaultPageSize %>,
        activities: <%- JSON.stringify(activities) %>,
        totalActivityCount: <%= activityCount %>,
        searchActivities: '',
        sortAlphabetical: true,
        newActivityName: '',
        selectedActivity: <%- JSON.stringify(activities[0]) || JSON.stringify(null) %>
      },
      computed: {
        pageCount: function() {
          return Math.ceil(this.totalActivityCount / this.pageSize);
        }
      },
      watch: {
        // if page size changes, display new results from beginning; change if not desired behavior
        pageSize: function(newValue, oldValue) {
          this.pageNumber === 1 ? this.refreshResults() : this.pageNumber = 1;
        },
        pageNumber: function(newValue, oldValue) {
          this.refreshResults();
        }
      },
      methods: {
        refreshResults: function() {
          var queryString = '';
          queryString += ('page=' + this.pageNumber);
          queryString += ('&pageSize=' + this.pageSize);
          queryString += ('&sortAlphabetical=' + this.sortAlphabetical);
          if (this.searchActivities) queryString += ('&activityName=' + this.searchActivities);

          var self = this;
          axios.get('/api/activities-paginated?' + queryString)
            .then(function(data) {
              if (data.data) {
                self.activities = data.data['activities'];
                self.totalActivityCount = data.data['count'];
              }
            })
            .catch(function(err) {
              alert('There was an issue updating your search results. Please try again');
            });
        },
        redoSearch: function() {
          this.pageNumber === 1 ? 
            this.refreshResults() : 
            this.pageNumber = 1;
        },
        clearFilters: function() {
          this.searchActivities = '';
          this.sortAlphabetical = true;
        },
        paginateLeft: function() {
          if (this.pageNumber > 1) this.pageNumber--;
        },
        paginateRight: function() {
          if (this.pageNumber < this.pageCount) this.pageNumber++;
        },
        createActivity: function() {
          axios.post('/api/admin-create-activity', {
            activity_name: this.newActivityName
          })
            .then(function(data) {
              alert('Successfully created activity');
              UIkit.modal('#add-activity').hide();
            })
            .catch(function(err) {
              alert('There was an issue processing your request. Please try again shortly');
            });
        },
        setSelectedActivity: function(activity) {
          this.selectedActivity = activity;
        },
        deleteActivity: function() {
          axios.delete('/api/activity/' + this.selectedActivity.id)
            .then(function(data) {
              alert('Successfully deleted activity');
              UIkit.modal('#confirm-delete-activity').hide();
            })
            .catch(function(err) {
              alert('There was an issue processing your request. Please try again shortly');
            });
        }
      }
    });

    var app = new Vue({
      el: '#app',
      data: {
        pageNumber: 1,
        pageSize: <%= defaultPageSize %>,
        totalGroupCount: <%= groupCount %>,
        groups: <%- JSON.stringify(groups) %>,
        selectedGroup: <%- JSON.stringify(groups[0]) || JSON.stringify(null) %>,
        newGroupName: '',
        newGroupDescription: '',
        searchGroupName: '',
        sortAlphabetical: false,
        selectedGroupMembersNameSearch: '',
        newSelectedGroupLeader: {}
      },
      computed: {
        pageCount: function() {
          return Math.ceil(this.totalGroupCount / this.pageSize);
        },
        displaySelectedGroupUsers: function() {
          var self = this;
          return this.selectedGroup ? this.selectedGroup.users.filter(function(user) { 
            var username = [user.first_name, user.middle_name, user.last_name].filter(function(e) { return !!e; }).join(' ');
            return username ? username.toLowerCase().indexOf(self.selectedGroupMembersNameSearch.toLowerCase()) !== -1 : false }) : [];
        }
      },
      watch: {
        // if page size changes, display new results from beginning; change if not desired behavior
        pageSize: function(newValue, oldValue) {
          this.pageNumber === 1 ? this.refreshResults() : this.pageNumber = 1;
        },
        pageNumber: function(newValue, oldValue) {
          this.refreshResults();
        }
      },
      methods: {
        refreshResults: function() {
          var queryString = '';
          queryString += ('page=' + this.pageNumber);
          queryString += ('&pageSize=' + this.pageSize);
          queryString += ('&sortAlphabetical=' + this.sortAlphabetical);
          if (this.searchGroupName) queryString += ('&groupName=' + this.searchGroupName);

          var self = this;
          axios.get('/api/groups-paginated?' + queryString)
            .then(function(data) {
              if (data.data) {
                self.groups = data.data['groups'];
                self.totalGroupCount = data.data['count'];
              }
            })
            .catch(function(err) {
              alert('There was an issue updating your search results. Please try again');
            });
        },
        clearFilters: function() {
          this.searchGroupName = '';
          this.sortAlphabetical = true;
        },
        redoSearch: function() {
          this.pageNumber === 1 ? 
            this.refreshResults() : 
            this.pageNumber = 1;
        },
        createGroup: function() {
          var errMsg = '';
          if (!this.newGroupName) errMsg += 'New group must have a name\n';
          if (!this.newGroupDescription) errMsg += 'New group must have a description\n';

          if (errMsg) alert(errMsg);
          else {
            axios.post('/api/group', {
              group_name: this.newGroupName,
              group_description: this.newGroupDescription
            }).then(function(data) {
              UIkit.modal('#add_group').hide();
            }).catch(function(err) {
              alert('There was an issue creating the group. Please try again');
            });  
          }
        },
        deleteGroup: function(group) {
          var self = this;
          axios.delete('/api/group/' + group.id)
            .then(function(data) {
              self.groups = self.groups.filter(function(e) { return e.id !== group.id; });
              alert('You deleted ' + group.group_name);
              UIkit.modal('#confirm-delete').hide();
            })
            .catch(function(err) {
              alert('There was an issue deleting the group. Please try again');
            });
        },
        paginateLeft: function() {
          if (this.pageNumber > 1) this.pageNumber--;
        },
        paginateRight: function() {
          if (this.pageNumber < this.pageCount) this.pageNumber++;
        },
        setSelectedGroup: function(group) {
          this.selectedGroup = group;
        },
        setNewSelectedGroupLeader: function(user) {
          this.newSelectedGroupLeader = user;
        },
        updateSelectedGroupLeader: function() {
          var self = this;
          axios.post('/api/group/update-leader', {
            groupId: this.selectedGroup.id,
            userId: this.newSelectedGroupLeader.id
          })
            .then(function(data) {
              var groupLeaderName = [self.newSelectedGroupLeader.first_name, self.newSelectedGroupLeader.middle_name, self.newSelectedGroupLeader.last_name].filter(function(e) { return !!e; }).join(' ');
              alert('Successfully made ' + groupLeaderName + ' the group leader for ' + self.selectedGroup.group_name);
              UIkit.modal('#edit-leader').hide();
            })
            .catch(function(err) {
              alert('There was an issue processing your request. Please try again');
            });
        }
      }
    });
  </script>
</body>
</html>
